# This is a basic workflow to help you get started with Actions

name: Queue After CI

# Controls when the workflow will run
on:
  merge_group:
    types: [checks_requested]
  
concurrency: 
  group: ${{ github.event.pull_request.head.repo.full_name}}/${{ github.event.pull_request.head.ref }}/${{ github.workflow }}
  cancel-in-progress: true

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  queue_after:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: actions/setup-go@v3
        with:
          go-version: '1.20'
          check-latest: true
          cache: true
          # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
        with: |
          fetch-depth: "3"
          repository: "matrixorigin/matrixone"
          ref: "main"
          path: ./matrixone

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          cd $GITHUB_WORKSPACE/matrixorigin
          make clean && make config && make cgo
          echo "test_scope=$(go list ./... | grep -v 'driver\|engine/aoe\|engine/memEngine\|pkg/catalog' | xargs)" >> $GITHUB_ENV
          echo "raw_ut_coverage='ut_coverage.raw'" >> $GITHUB_ENV
          echo "raw_bvt_coverage='bvt_coverage.raw'" >> $GITHUB_ENV
          echo "raw_bvt_coverage_temp='bvt_coverage_temp.raw'" >> $GITHUB_ENV
          echo "raw_ut_coverage_temp='ut_coverage_temp.raw'" >> $GITHUB_ENV
          echo "all_coverage='all_coverage.raw'" >> $GITHUB_ENV
          echo "test_report='test_report.out'" >> $GITHUB_ENV
          echo "ut_report='mo_service_ut.log'" >> $GITHUB_ENV
          echo "coverage_line=75" >> $GITHUB_ENV
          
          echo "endpoint=${{ secrets.S3ENDPOINT }}" >> $GITHUB_ENV
          echo "region=${{ secrets.S3REGION }}" >> $GITHUB_ENV
          echo "apikey=${{ secrets.S3APIKEY }}" >> $GITHUB_ENV
          echo "apisecret=${{ secrets.S3APISECRET }}" >> $GITHUB_ENV
          echo "bucket=${{ secrets.S3BUCKET }}" >> $GITHUB_ENV
          
          echo "-----------------------ut start-----------------------"
          CGO_CFLAGS="-I${GITHUB_WORKSPACE}/matrixone/cgo"
          CGO_LDFLAGS="-L${GITHUB_WORKSPACE}/matrixone/cgo -lmo -lm"
          go test -v -cover -tags matrixone_test -p 1 -covermode=set -coverprofile ${{ env.raw_ut_coverage }} -count=1 ${{ env.test_scope }} 2>&1 | tee ${{ env.ut_report }}
